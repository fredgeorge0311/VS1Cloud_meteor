openDb1 = function (dbName) {
  return new Promise((resolve, reject) => {
    let dbReq = indexedDB.open(dbName, 1);
    //localStorage.setItem("vs1Db", dbName)

    dbReq.onsuccess = () => resolve(dbReq.result);

    dbReq.onupgradeneeded = function (event) {
      let db = event.target.result;
    }

    dbReq.onerror = (event) => reject(new Error('Failed to open DB'));
  });
}
openDb = function (dbName) {
  return new Promise((resolve, reject) => {
    let dbReq = indexedDB.open(dbName, 1);
    localStorage.setItem("vs1Db", dbName)

    dbReq.onsuccess = () => resolve(dbReq.result);

    dbReq.onupgradeneeded = function (event) {
      let db = event.target.result;
      db.createObjectStore("vscloudlogininfo", { keyPath: "EmployeeEmail" });
      db.createObjectStore("TProductVS1", { keyPath: "TProductVS1ID" });
      db.createObjectStore("TCustomerVS1", { keyPath: "TCustomerVS1ID" });
      db.createObjectStore("TSupplierVS1", { keyPath: "TSupplierVS1ID" });
      db.createObjectStore("TAccountVS1", { keyPath: "TAccountVS1ID" });
      db.createObjectStore("TTaxcodeVS1", { keyPath: "TTaxcodeVS1ID" });
      db.createObjectStore("TTermsVS1", { keyPath: "TTermsVS1ID" });
      db.createObjectStore("TDeptClass", { keyPath: "TDeptClassID" });
      db.createObjectStore("TCurrency", { keyPath: "TCurrencyID" });
      db.createObjectStore("TLeadStatusType", { keyPath: "TLeadStatusTypeID" });
      db.createObjectStore("TShippingMethod", { keyPath: "TShippingMethodID" });
      db.createObjectStore("TAccountType", { keyPath: "AccountTypeID" });
      db.createObjectStore("TERPCombinedContactsVS1", { keyPath: "ContactID" });
      db.createObjectStore("TEmployee", { keyPath: "EmployeeEmail" });
    }

    dbReq.onerror = (event) => reject(new Error('Failed to open DB'));
  });
}

storeExists = async function (Email) {
  var exists = false;
  //change to vs1
  if (localStorage.getItem("vs1Db") === null) { } else {
    const db = await openDb1(localStorage.getItem("vs1Db"));
    const transaction = await db.transaction(['vscloudlogininfo']);
    const objectStore = await transaction.objectStore('vscloudlogininfo');
    var objectStoreRequest = objectStore.get(Email);

    objectStoreRequest.onsuccess = function () {
      if (Email == objectStoreRequest.result.EmployeeEmail) {
        exists = true;
      }
    };
  }

  return exists;
}


addLoginData = async function (loginData) {
  const db = await openDb(loginData.ProcessLog.Databasename);
  let transaction = await db.transaction(["vscloudlogininfo"], "readwrite");

  transaction.oncomplete = function (event) {
    console.log("Transaction completed");
  };

  let loginInfo = {
    EmployeeEmail: loginData.ProcessLog.VS1AdminUserName,
    data: loginData
  }
  let objectStore = transaction.objectStore("vscloudlogininfo");
  objectStore.put(loginInfo);
}


queryLoginDataObject = function (objectStore, VS1AdminUserName) {
  var promise =  new Promise((resolve, reject) => {
    let results = objectStore.openCursor();
    let data = [];

    results.onerror = () => reject(Console.log('Encountered error querying object store.'));
    results.onsuccess = (event) => {
      let cursor = event.target.result;
      if (cursor) {
        if (VS1AdminUserName == cursor.key) {
          alert("Thabang is here");
          data.push(cursor.value);
          cursor.continue();
        }
      } else{
        console.log(data);
       resolve(data);
      }
    };
  });
  return promise;
}


getLoginData = async function (email) {
  const db = await openDb(localStorage.getItem("vs1Db"));
  const transaction = await db.transaction(["vscloudlogininfo"]);
  const objectStore = await transaction.objectStore('vscloudlogininfo');
  return await queryLoginDataObject(objectStore, email);
}
